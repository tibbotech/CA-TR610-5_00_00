include "global.tbh"

'======================================================
sub send_bmp
	dim bmp_width,bmp_height,bmp_data_size,file_size,bmp_offset,xx as string(4)
	dim palettes_content as string(64)
	dim file_volume,data_size,offset as dword
	dim set_width, set_height as word
	dim p,pix_bit,used_color,used_color1,spare as byte
	dim file_header as string

'----------------------------------------------------------------------------
	set_width=lcd.width								
	set_height=lcd.height
	spare=0
	data_size=0
	xx=""
	palettes_content=""

#if LCD_TYPE=SAMSUNG_S6B0108
	offset=62 										'&H 3E means Black/White image 
	pix_bit=1
	used_color=2
	used_color1=0
	'----------- identify 4 bytes(dword)alight in calulating file offset-------------- 
	if ((set_width/8) mod 4) <> 0 then spare=(4-((set_width/8) mod 4))*set_height
	if set_width mod 8 <> 0 and set_width <>0 and set_height <>0 then data_size=data_size+1
	data_size = data_size + ((set_width/8)*set_height)+spare
	'----------- set B/W palettes content -------------- 
	palettes_content=chr(0)+chr(0)+chr(0)+chr(0)+chr(&hFF)+chr(&hFF)+chr(&hFF)+chr(0)

	'----------- adjust 4 bytes(dword)alight --------------------- 
	if ((lcd.width/8) mod 4) > 0 then 
		p=(lcd.width/8) mod 4
		do 
			xx=xx+chr(0)
			p=p-1
		loop until p=0
	end if
	
#elif LCD_TYPE=HIMAX_HX8309
	offset=54 										' means full color
	pix_bit=24
	used_color=0									' means full color
	if lcd.paneltype = PL_LCD_PANELTYPE_COLOR then
		used_color1=0								' 24-bit true color
	else used_color1=1								' 256 color 	
	end if 
	'----------- identify 4 bytes(dword)alight in calulating file offset-------------- 
	if ((set_width*3) mod 4) <> 0 then spare=(4-((set_width*3) mod 4))*set_height
	data_size = data_size + (set_width*3*set_height)+spare
	'----------- set Color palettes content -------------- 
	palettes_content=""
	'----------- adjust 4 bytes(dword)alight --------------------- 
	if ((lcd.width*3) mod 4) > 0 then
		p=(lcd.width*3) mod 4
		do 
			xx=xx+chr(0)
			p=p-1
		loop until p=0
	end if

#else
	offset=118 										'&H 76	means color or gray
	pix_bit=4										
	used_color=16									' 4-bit grayscale
	used_color1=0
	'----------- identify 4 bytes(dword)alight in calulating file offset--------- 	
	if ((set_width/2) mod 4) <> 0 then spare=(4-((set_width/2) mod 4))*set_height
	data_size = data_size + ((set_width/2)*set_height)+spare
	'----------- set 4-bit (16 scale) content -------------- 
	for p =0 to used_color-1
		palettes_content=palettes_content+chr(p*17)+chr(p*17)+chr(p*17)+chr(0)
	next p 
	'----------- adjust 4 bytes(dword)alight --------------------- 
	if ((lcd.width/2) mod 4) > 0 then
		p=(lcd.width/2) mod 4
		do 
			xx=xx+chr(0)
			p=p-1
		loop until p=0
	end if
	
#endif

'------------- calculate bmp size ------------------------------------------------------------
	bmp_offset=size_convert(offset)
	file_volume=data_size+offset	'header contents' bytes
	file_size=size_convert(file_volume)
	bmp_data_size= size_convert(data_size)
'---------------------------------------------------------------------------------------------		
	bmp_width=size_convert(set_width)
	bmp_height=size_convert(set_height)

'---------	bmp file header	----------------------------total 14 bytes----	
	file_header="BM"+							'2 bytes 	
			file_size+							'4 bytes file size 		
			chr(0)+chr(0)+chr(0)+chr(0)+ 		'4 bytes reserved
			bmp_offset+							'4 bytes	
'---------	bmp information header	--------------------total 40 bytes----
			chr(&h28)+chr(0)+chr(0)+chr(0)+		'4 bytes Bitmap Information Header Size
			bmp_width+							'4 bytes width
			bmp_height+							'4 bytes height	
			chr(1)+chr(0)+						'2 bytes planes now is null
			chr(pix_bit)+chr(0)+				'2 bytes bit per pixel 
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes compression
			bmp_data_size+
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes Horizental Resolution
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes Vertical Resolution
			chr(used_color)+chr(used_color1)+chr(0)+chr(0)+'4 bytes Used Color
			chr(0)+chr(0)+chr(0)+chr(0) 		'4 bytes important Color
'----------------------------------------------- N = used color = N *4 bytes are palette

'---process contents of bit map file-------------------------------------------------
	dim w,h,j,x,lcd_red, lcd_green, lcd_blue as word
	dim temp,m,d,q,temp_gray as byte
	dim kk as string 

	sock.setdata(file_header+palettes_content)
	sock.send
'-------------------------------------------------------------------------------------
	temp=0										'
	temp_gray=0
	kk=""
	q= &b10000000
	h=lcd.height
	w=lcd.width
'-------------------------------------------------------------------------------------
	w=w-1
	do '----- get pixels from button to top and send out 
		h=h-1	
		for j= 0 to w 							'process each point of line
			x= lcd.getpixel(j,h)				'get content of each pixel
			
			select case  pix_bit				' select which panel 
			
				case 1:							' B/W LCD panel
					if x <> 0 then temp=temp OR q
					q=q/2	
					if q=0 then
						kk=kk+chr(temp) 
						q= &b10000000
						temp=0
					end if
						
				case 24:						' Color LCD panel
				
												' get properties of pixel of each color
					lcd_blue= ((x and &b1111100000000000)/2048*255/31)
					lcd_green= ((x and &b0000011111100000)/32*255/63)
					lcd_red= ((x and &b0000000000011111)*255/31)
					kk=chr(lcd_blue)+chr(lcd_green)+chr(lcd_red)
					
					sock.setdata(kk)		'put contents of each line in tx buffer and
					while sock.txlen >1024	'activate sock.send when sock.txlen >1024
						sock.send			 
					wend
						
				case 4:							' Grayscale LCD panel
					' get each pixel's scale
					if j mod 2 = 0 then 
						temp_gray=16*x			' put MSB
					else 
						temp_gray =temp_gray+x	' put LSB
						kk=chr(temp_gray)
						sock.setdata(kk)
					end if
					while sock.txlen >1024	'activate sock.send when sock.txlen >1024
						sock.send			 
					wend
			end select
			
		next j
		'-----adjust 4 bytes alight to follow the rule "each line contain multiple of 4 bytes
		if xx<>"" then 
			kk=kk+xx	
			sock.setdata(kk)		
		end if
		if sock.txlen > 0 then sock.send
			
		if pix_bit = 1 then
			sock.setdata(kk)
			while sock.txlen >1024	'activate sock.send when sock.txlen >1024
				sock.send			 
			wend
			kk=""
			q= &b10000000
			temp=0
		end if 
	loop until h = 0
	
	if 	sock.txlen>0 then sock.send
			
end sub	

'===================================================================================
function size_convert(v as dword) as string(4)
' convert parameter from dword to 4 bytes string

	dim d as string(10)
	dim p(8) as byte		'P() is &H 1xxxxxx8
	dim k,j,w as short
	dim q as byte
	
	d= lhex(v) 				'&H in front of data
	d = mid(d,3,len(d)-2)	'remove &H, rest part is value  
	k=len(d)				'length of d
	j=k
	w=k-1
	
	for q = 0 to w
		p(q)=asc(right(d,1))-48			' decimal of ASCII code "1" is 49-48= 1 
		if p(q) >16 then p(q)=p(q)-7	' decimal of ASCII code "A" is 65-48-7 =10 
		d= left(d,j-q-1)
	next q
	 
	if k=8 then goto next_size
	
	for q = k to 7  
		p(q)=0
	next q 
next_size:
	
	p(0)=p(0)+p(1)*16
	p(2)=p(2)+p(3)*16
	p(4)=p(4)+p(5)*16
	p(6)=p(6)+p(7)*16
	size_convert = chr(p(0))+chr(p(2))+chr(p(4))+chr(p(6))
	
end function		

