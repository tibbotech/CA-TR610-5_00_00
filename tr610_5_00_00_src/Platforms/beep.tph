'**************************************************************************************************
'		BEEP (Beeper) object
'**************************************************************************************************

#define BEEP_AVAILABLE 1

object beep
'The beep object allows you to generate "beep" patters using the beeper (buzzer) attached to pin <font color="olive"><b>PL_IO_NUM_45/CO </b></font>of the
'device. "CO" stands for "clock output" and its output can be actually used for anything, not just controlling beeper.<br><br>
'When the pattern starts playing, the CO line becomes an output automatically. Therefore, you do not need to use the
'<font color="maroon"><b>io.enabled </b></font>property to configure this line as output. When the pattern stops playing, the line will return to the
'input/output and HIGH/LOW state that it had before the pattern started playing.

'--------------------------------------------------------------------
event(17)  on_beep
'EVENT of the beep object. 
'Generated when beeper pattern finishes "playing". This can only happened for "non-looped" patterns.
'<br><br>
'Multiple <font color="teal"><b>on_beep </b></font> 
'events may be waiting in the event queue. Using doevents statement in the event handler for this event or the body of any procedure in the related
'call chain may lead to the skipping (loss) of identical events waiting in the queue. This will happen when the 
'<font color="teal"><b>on_beep </b></font>
'event is taken off the queue in the cause of the doevents execution related to the same event taken off the queue earlier.

'--------------------------------------------------------------------
enum pl_beep_int 
	PL_BEEP_NOINT,		'<b>PLATFORM CONSTANT. </b><br><br> Tells the beep.play method that the new pattern can only be loaded if
						'no pattern is playing at the moment (no interrupting of previous pattern).
	PL_BEEP_CANINT		'<b>PLATFORM CONSTANT. </b><br><br> Tells the beep.play method that the new pattern can be loaded even if
						'another pattern is currently playing (previous pattern can be interrupted).
end enum

syscall(178,"30.TDL") beep.play(byref pattern as string, patint as pl_beep_int)
'<b>METHOD. 
'</b><br><br> Loads new beeper pattern to play. The pattern string defines the pattern to play, for example: "B-B", where '-'
'means "beeper off", and 'B' means "beeper on". Additionally, '~' can be added to specify that the pattern should loop
'indefinitely (not just play once), '*' can be used to make the pattern "play" at double speed ('~' and '*' can be added
'anywhere in the pattern string). Maximum pattern length is 16 "steps". <br><br>
'The second parameter defines whether the <font color="maroon"><b>beep.play </b></font>
'method is allowed to interrupt another pattern that is already playing: <font color="olive"><b>0- PL_BEEP_NOINT </b></font>(cannot interrupt),
'<font color="olive"><b>1-  PL_BEEP_CANINT </b></font>(can interrupt). The <font color="teal"><b>on_beep</b></font> event is generated once the pattern finishes playing (will not happened
'if the pattern is looped). See also <font color="maroon"><b>beep.divider</b></font>.<br><br>
'Buzzer control signal is available on the <font color="olive"><b>PL_IO_NUM_45/CO </b></font>line of the device. "CO" stands for "clock output" and its
'output can be actually used for anything, not just controlling beeper (hint: set pattern to "B~" to continuously generate
'a square wave output on the CP line). When the pattern starts playing, the CO line becomes an output automatically.
'Therefore, you do not need to use the <font color="maroon"><b>io.enabled </b></font> property to configure this line as output. When the pattern stops playing,
'the line will return to the input/output and HIGH/LOW state that it had before the pattern started playing.<br><br>
'See also <font color="maroon"><b>beep.divider</b></font>.

'--------------------------------------------------------------------
property beep.divider
'<b>PROPERTY (WORD), DEFAULT VALUE= 1 (divide by 2). </b><br><br>
'Sets the frequency of the square wave output on <font color="olive"><b>PL_IO_NUM_45/CO </b></font>line. Actual frequency can be calculated as
'base_frq/(2*beep.divider). Base_frq depends on the current PLL mode of the device. <br><br>
'When the <font color="maroon"><b>sys.currentpll </b></font>= <font color="olive"><b>0- OFF </b></font>the base frequency is 11.059200MHz. 
'When the <font color="maroon"><b>sys.currentpll </b></font>= <font color="olive"><b>1- ON </b></font>the base frequency is 88.73600MHz. 
'Setting this property to 0 is equivalent to 65536 (i.e. actual frequency will be base_frq/131072). <br><br>
'See also <font color="maroon"><b>beep.play</b></font>.
	get = syscall(179) as word
	set = syscall(180) (value as word)
end property
