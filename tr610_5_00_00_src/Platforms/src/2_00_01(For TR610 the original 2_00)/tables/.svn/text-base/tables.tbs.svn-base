'***********************************************************************************************************
'			TABLES LIBRARY
'***********************************************************************************************************

include "global.tbh"

public dim tbl_record_string as string(128) 'the largest record allowed is 128 bytes
dim tbl_suspend_flushing as no_yes
dim tbl_num as byte
dim fld_num as byte
dim tbl_info as tbl_type(MAX_NUM_TABLES)
dim selected_tbl_name as string(MAX_TBL_NAME_LEN)
dim selected_tbl_RecSize as byte
dim selected_tbl_Maxrecs as word
dim selected_tbl_Numkeyf as byte
dim selected_tbl_Struct as en_tbl_struct
dim selected_tbl_active_rc as word

declare sub tbl_check_for_missing_fields(curr_pos as word, line_end_pos as word)
declare sub tbl_active_rc_sg(byref rec_count as word,op as en_tbl_rdwr)
declare function tbl_field_find(field_name as string) as en_tbl_status

'-------------------------------------------------------------
public function tbl_select(tbl_name as string(MAX_TBL_NAME_LEN)) as en_tbl_status
	selected_tbl_name =""
	selected_tbl_RecSize = 0
	'find table
	if tbl_find(tbl_name)<>EN_TBL_STATUS_OK then goto tbl_unknown_tbl
	'open table
	fd.filenum = tbl_info(tbl_num).fnum
	if fd.fileopened = NO then
		if fd.open(tbl_name) <> PL_FD_STATUS_OK then goto tbl_fail
	end if
	selected_tbl_name = tbl_info(tbl_num).TableName
	selected_tbl_RecSize = tbl_info(tbl_num).RecSize
	selected_tbl_Maxrecs = tbl_info(tbl_num).Maxrecs
	selected_tbl_Numkeyf = tbl_info(tbl_num).Numkeyf
	selected_tbl_Struct = tbl_info(tbl_num).Struct
	tbl_active_rc_sg(selected_tbl_active_rc,EN_TBL_GET)
tbl_ok:
	tbl_select = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_select = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_select = EN_TBL_STATUS_UNKNOWN_TABLE
end function

'-------------------------------------------------------------
sub tbl_attributes_sg(byref tbl_name as string(MAX_TBL_NAME_LEN), attri_name as string(4),byref attri_val as string(7),op as en_tbl_rdwr)
	dim s as string(13)
	dim sHash as string(4)
	dim sTs as string(7)
	dim sRC as string(2)
	s = fd.getattributes(tbl_name)
	sHash = mid(s,1,4)
	sTs = mid(s,5,7)
	sRC = mid(s,12,2)
	if op = EN_TBL_GET then
		select case attri_name
		case "HASH":
			attri_val = sHash
		case "TS":
			attri_val = sTs
		case "RC":
			attri_val = sRC
		case else
			attri_val = s
		end select
	else
		select case attri_name
		case "HASH":
			s = attri_val+sTs+sRC
		case "TS":
			s = sHash+attri_val+sRC
		case "RC":
			s = sHash+sTs+attri_val
		case else
			s = strgen(13,chr(NULL))
		end select
		fd.setattributes(tbl_name,s)
	end if
end sub
'-------------------------------------------------------------
sub tbl_active_rc_sg(byref rec_count as word,op as en_tbl_rdwr)
	dim s as string(2)
	dim msb, lsb as byte
	if op = EN_TBL_GET then
		tbl_attributes_sg(selected_tbl_name,"RC",s,EN_TBL_GET)
		msb = asc(left(s,1))
		lsb = asc(right(s,1))
		rec_count = msb*256+lsb
	else
		msb = rec_count/256
		lsb = rec_count mod 256
		s = chr(msb)+chr(lsb)
		tbl_attributes_sg(selected_tbl_name,"RC",s,EN_TBL_SET)
	end if
end sub
'-------------------------------------------------------------
public function tbl_init() as en_tbl_status
'Descr: Intitalize the table, prepare the table structure variables. 
	dim s as string
	dim i,j,c,line_end as word
	dim f as byte
	dim fd_status as pl_fd_status_codes
	
	tbl_record_string = chr(val(ACTIVE_FLAG))+strgen(127,chr(NULL))
	tbl_suspend_flushing=NO
	tbl_num=0 'will count settings (starting from 0)
	
	romfile.open("tables.txt")				'this file is a tables descriptor file
	i=romfile.find(romfile.pointer,">>",1)

	while i<>0	
		'we are now at the ">>" pointing at the beginning of one setting descriptor line
		romfile.pointer=i+2
		
		'find the end of this setting descriptor line
		line_end=romfile.find(romfile.pointer,chr(TBL_END_OF_LINE),1)
		
		'extract table name
		do 
			i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
			tbl_check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		'name too long?
		if len(s)>MAX_TBL_NAME_LEN then
			sys.halt
			tbl_num=0 'you need to increase MAX_SETTING_NAME_LEN!
		end if
		tbl_info(tbl_num).TableName=s

		'extract the minimum of records
		do
			i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
			tbl_check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		'we do not need to check word
		tbl_info(tbl_num).Minrecs=val(s)

		'extract the maximum of records
		do
			i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
			tbl_check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		

		tbl_info(tbl_num).Maxrecs=val(s)

		if tbl_info(tbl_num).Maxrecs<tbl_info(tbl_num).Minrecs then
			sys.halt
			tbl_num=0	'Maxrecs parameter cannot be smaller than Minrecs parameter
		end if
		
		'extract the structure type of tables
		do
			i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
			tbl_check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		select case s
			case "LIST":tbl_info(tbl_num).Struct = EN_TBL_STRUCT_LIST
			case "TABLE": tbl_info(tbl_num).Struct = EN_TBL_STRUCT_TABLE
		end select
		
		'extract if the table uses Hash
		do
			i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
			tbl_check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		if s = "Y" then 
			tbl_info(tbl_num).hash = YES
		else
			tbl_info(tbl_num).hash = NO
		end if
		'extract number of keys	
		do
			s=romfile.getdata(1)
		loop while s=chr(TBL_FIELD_SEPARATOR)
		
		tbl_info(tbl_num).Numkeyf=val(s)
		romfile.pointer=romfile.pointer-1
		i = romfile.pointer
		s=romfile.getdata(line_end-i)
		
		'exceeded the max number of settings?
		if tbl_num>=MAX_NUM_TABLES and i<>0 then
			sys.halt
			tbl_num=0 'you need to increase MAX_NUM_SETTINGS!
		end if
		i=romfile.find(romfile.pointer,">>",1)
		tbl_num=tbl_num+1		
	wend
	
	for j =0 to MAX_NUM_TABLES-1
		s = tbl_info(j).TableName+".txt"
		romfile.open(s)				
		i=romfile.find(romfile.pointer,">>",1)
 
		tbl_info(j).Fields(0).FieldName ="MD5"
		tbl_info(j).Fields(0).FieldType = asc("Z")
		tbl_info(j).Fields(0).key = no
		tbl_info(j).Fields(0).p1 = 0
		tbl_info(j).Fields(0).p2 = 4294967295 
		tbl_info(j).Fields(0).romaddr_def = 0
		tbl_info(j).Fields(1).FieldName ="UID"
		tbl_info(j).Fields(1).FieldType = asc("Z")
		tbl_info(j).Fields(1).key = yes
		tbl_info(j).Fields(1).p1 = 0
		tbl_info(j).Fields(1).p2 = 2147483647 
		tbl_info(j).Fields(1).romaddr_def = 0
		fld_num=2	
		
		f = 1 'including the 1 byte active flag
		while i<>0
			romfile.pointer=i+2
			'find the end of this setting descriptor line
			line_end=romfile.find(romfile.pointer,chr(TBL_END_OF_LINE),1)
			
			'extract field name
			do
				i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
				tbl_check_for_missing_fields(i,line_end)			
				s=romfile.getdata(i-romfile.pointer)
				romfile.pointer=i+1
			loop while s="" 		
			'name too long?
			
			if len(s)>MAX_FLD_NAME_LEN then
				sys.halt
				fld_num=0 'you need to increase MAX_FLD_NAME_LEN!
			end if
			tbl_info(j).Fields(fld_num).FieldName=s

			'extract setting type
			do
				i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
				tbl_check_for_missing_fields(i,line_end)			
				s=romfile.getdata(i-romfile.pointer)
				romfile.pointer=i+1
			loop while s="" 		
			select case s
			case "S","B","W","I","L","Y","D","T":
			case else
				sys.halt
				fld_num=0 'unknown setting type
			end select
			tbl_info(j).Fields(fld_num).FieldType=asc(s)

			'extract p1
			do
				i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
				tbl_check_for_missing_fields(i,line_end)			
				s=romfile.getdata(i-romfile.pointer)
				romfile.pointer=i+1
			loop while s="" 		
			
			select case tbl_info(j).Fields(fld_num).FieldType
			case `B`,`S`:
				if val(s)>255 then
					sys.halt
					'minimum value (p1 param) for byte settings can't exceed 255
					'minimum length (p1 param) for string and dot-decimal settings can't exceed 255
				fld_num=0
				end if
			end select
			'we do not need to check word
			tbl_info(j).Fields(fld_num).p1=val(s)

			'extract p2
			do
				i=romfile.find(romfile.pointer,chr(TBL_FIELD_SEPARATOR),1) 
				tbl_check_for_missing_fields(i,line_end)			
				s=romfile.getdata(i-romfile.pointer)
				romfile.pointer=i+1
			loop while s="" 		

			select case tbl_info(j).Fields(fld_num).FieldType
			case `B`,`S`:
				if val(s)>255 then
					sys.halt
					'maximum value (p1 param) for byte settings can't exceed 255
					'maximum length (p1 param) for string and dot-decimal settings can't exceed 255
					fld_num=0
				end if
			
			end select
			'we do not need to check word
			tbl_info(j).Fields(fld_num).p2=val(s)

			if tbl_info(j).Fields(fld_num).p2<tbl_info(j).Fields(fld_num).p1 then
				sys.halt
				fld_num=0	'p2 parameter cannot be smaller than p1 parameter
			end if
			
			'memorize the offset of the default value
			do
			s=romfile.getdata(1)
			loop while s=chr(TBL_FIELD_SEPARATOR)
			'are we at the end of the string?
			if s=chr(TBL_FIELD_SEPARATOR) then
				sys.halt
				fld_num=0 'default value field is missing in the descriptor
			end if
			tbl_info(j).Fields(fld_num).romaddr_def=romfile.pointer-1
			
			f = f+tbl_get_field_size(j,fld_num)
	
			i=romfile.find(romfile.pointer,">>",1)
			fld_num=fld_num+1
		wend
		
		f = f+8

		if tbl_info(j).Struct = EN_TBL_STRUCT_LIST then
			i = 2
			while 128 mod f >0 and f < 128 and f > 0
				if f > i then 
					i = i*2
				else
					f = i
				end if
			wend
		end if 
		tbl_info(j).RecSize = f
		s = tbl_info(j).TableName
		tbl_info(j).fnum = TBL_START_FNUM+j
		fd.filenum = tbl_info(j).fnum
		fd_status=fd.open(s)
		select case fd_status
		case PL_FD_STATUS_NOT_FOUND
			'need to create this file
			fd_status=fd.create(s)
		'rtc.getdata(timestamp.ts_daycount,timestamp.ts_mincount,timestamp.ts_seconds)

			tbl_attributes_sg(s,"","",EN_TBL_SET)
			if fd_status<>PL_FD_STATUS_OK then
				tbl_info(j).RecPointer=0
				goto tbl_fail
			end if
			fd_status=fd.open(s)
			if fd_status<>PL_FD_STATUS_OK then
				tbl_info(j).RecPointer=0
				goto tbl_fail
			end if
		case PL_FD_STATUS_OK
			'all is good -- just reset the file size to 0
			tbl_info(j).RecPointer=1
		case else
			'some other problem
			tbl_info(j).RecPointer=0
			goto tbl_fail
		end select
	next j
tbl_ok:
	tbl_init = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_init = EN_TBL_STATUS_FAILURE	'fd errors, and other errors
end function

'-------------------------------------------------------------
sub tbl_mod_HASH(byref d as dword)
	dim pos as byte
	dim msw, lsw as word
	dim hash_val as dword
	dim hash as string(4)
	dim rec_num as word

	tbl_attributes_sg(selected_tbl_name,"HASH",hash,EN_TBL_GET)

	msw = asc(left(hash,1))*256+asc(mid(hash,2,1))
	lsw = asc(mid(hash,3,1))*256+asc(mid(hash,4,1))
	hash_val=msw*65536 + lsw

	hash_val = hash_val xor d
	msw = hash_val/65536
	lsw = hash_val mod 65536
	hash = chr(msw/256)+chr(msw mod 256)+chr(lsw/256)+chr(lsw mod 256)
	tbl_attributes_sg(selected_tbl_name,"HASH",hash,EN_TBL_SET)
end sub

'-------------------------------------------------------------
public sub tbl_set_md5
'Descr: Calculate the MD5 of tbl_record_string, store it in the table, and also modify the table hash.
	dim temp, sFldVal as string
	dim i as byte
	dim d as dword
	dim msw, lsw as word
	tbl_field_sg("UID",sFldVal,EN_TBL_GET)
	temp = chr(ELEMENT_START)+"I"+chr(ELEMENT_NAME_VALUE_SEPARATOR)+sFldVal+chr(ELEMENT_END)
	for i = 2 to MAX_NUM_FIELD-3
		if tbl_field_sg(tbl_info(tbl_num).Fields(i).FieldName,sFldVal,EN_TBL_GET) = EN_TBL_STATUS_OK then
			temp = temp + chr(ELEMENT_START)+sFldVal+chr(ELEMENT_END)
		end if
	next i
	sFldVal = md5(temp,"",MD5_FINISH,len(temp))
	msw = asc(left(sFldVal,1))*256+asc(mid(sFldVal,2,1))
	lsw = asc(mid(sFldVal,3,1))*256+asc(mid(sFldVal,4,1))
	d = msw*65536 + lsw
	sFldVal = lstr(d)
	tbl_field_sg("MD5",sFldVal,EN_TBL_SET)
	tbl_mod_HASH(lval(sFldVal))
end sub
'-------------------------------------------------------------
public function tbl_record_number_get(byref num_of_records as word, include_deleted as no_yes) as en_tbl_status
'Descr: Gets total number of records (both active and inactive)
	
	'calculate the number of records

	if selected_tbl_RecSize = 0 then 
		tbl_record_number_get = EN_TBL_STATUS_UNKNOWN_TABLE
		exit function
	end if
	if include_deleted = yes then
		num_of_records = fd.filesize/selected_tbl_RecSize
	else
		num_of_records = selected_tbl_active_rc
	end if
	tbl_record_number_get = EN_TBL_STATUS_OK
end function

'-------------------------------------------------------------
public function tbl_record_ptr_sg(byref record_num as word,op as en_tbl_rdwr) as en_tbl_status
'Descr: Sets the record pointer for a record
	dim total_rec_num as word
	dim dPtr as dword


	if op = EN_TBL_GET then
		record_num = tbl_info(tbl_num).RecPointer
		goto tbl_ok		
	else
		if tbl_record_number_get(total_rec_num,yes)<>EN_TBL_STATUS_OK then 
			goto tbl_fail
		else
			if record_num > total_rec_num then
				dPtr = fd.filesize+1
				tbl_info(tbl_num).RecPointer = total_rec_num+1
				if fd.pointer <> dPtr then fd.setpointer(dPtr)
			else
				tbl_info(tbl_num).RecPointer = record_num
				dPtr = (tbl_info(tbl_num).RecPointer-1)*selected_tbl_RecSize+1
				if fd.pointer <> dPtr then fd.setpointer(dPtr)
				goto tbl_ok
			end if
		end if
	end if
tbl_ok:
	tbl_record_ptr_sg = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_record_ptr_sg = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_fail:
	tbl_record_ptr_sg = EN_TBL_STATUS_FAILURE	'fd errors, and other errors		
end function

'-------------------------------------------------------------
public function tbl_record_add() as en_tbl_status
'Descr: Add a record, record data is from tbl_record_string
	dim sKeyField, sFldVal,temp as string(128)
	dim i, sz as byte
	dim daddr1, daddr2 as dword
	
	sKeyField = ""
	'check if table is full
	if fd.filesize > (selected_tbl_RecSize-1)*selected_tbl_Maxrecs then goto tbl_full
	'construct key
	if selected_tbl_Numkeyf > 0 then
		for i = 0 to selected_tbl_Numkeyf-1
			sz = tbl_get_field_size(tbl_num,i)
			temp = strgen(sz,chr(val(NULL)))
			tbl_field_sg(tbl_info(tbl_num).Fields(i+2).FieldName,sFldVal,EN_TBL_GET)
			if sFldVal = "" or sFldVal = temp then goto tbl_key_violate
			sKeyField = sKeyField+sFldVal
		next i
	
		'search for same key
		daddr1 = 11
find_key:	
		daddr1 = fd.find(daddr1,sKeyField,1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
		if daddr1 > 0 then 'check if it's a deleted record
			daddr2 = fd.find(daddr1-10,chr(val(ACTIVE_FLAG)),1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
			if daddr2 = daddr1-10 then 
				goto tbl_key_violate
			else
				daddr1 = daddr1+selected_tbl_RecSize
				goto find_key
			end if
		end if
	end if

	'find the first deleted record, if not found move the pointer to the end of file and set data
	if selected_tbl_Struct=EN_TBL_STRUCT_LIST then
		fd.setpointer(fd.filesize+1)
	else
		daddr1 = fd.find(1,chr(val(DELETE_FLAG)),1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
		if daddr1 > 0 then
			fd.setpointer(daddr1)
		else
			fd.setpointer(fd.filesize+1)
		end if
	end if
	tbl_record_string = mid(tbl_record_string,2,selected_tbl_RecSize-2)
	tbl_record_string = chr(val(ACTIVE_FLAG))+tbl_record_string
	tbl_record_string = tbl_record_string+strgen(selected_tbl_RecSize-len(tbl_record_string),chr(NULL))
	fd.setdata(tbl_record_string)
	fd.flush
	selected_tbl_active_rc = selected_tbl_active_rc+1
	tbl_active_rc_sg(selected_tbl_active_rc,EN_TBL_SET)

	if fd.laststatus<>PL_FD_STATUS_OK then
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
	end if
	tbl_info(tbl_num).RecPointer = fd.pointer/selected_tbl_RecSize -1
tbl_ok:
	tbl_record_add = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_record_add = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_fail:
	tbl_record_add = EN_TBL_STATUS_FAILURE	'fd errors, and other errors
	exit function
tbl_full:
	tbl_record_add = EN_TBL_STATUS_FULL
	exit function
tbl_key_violate:
	tbl_record_add = EN_TBL_STATUS_KEY_VIOLATION
end function
 
'-------------------------------------------------------------
public function tbl_record_edit() as en_tbl_status
'Descr: changes the current record (tbl_record_ptr) by data from tbl_record_string
	dim sKeyField, sFldVal, temp as string(128)
	dim i, sz as byte
	dim daddr1, daddr2 as dword

	sKeyField = ""
	'construct key
	if selected_tbl_Numkeyf > 0 then
		for i = 0 to selected_tbl_Numkeyf-1
			sz = tbl_get_field_size(tbl_num,i)
			temp = strgen(sz,chr(val(NULL)))
			tbl_field_sg(tbl_info(tbl_num).Fields(i+2).FieldName,sFldVal,EN_TBL_GET)			
			if sFldVal = "" or sFldVal = temp then goto tbl_key_violate
			sKeyField = sKeyField+sFldVal
		next i
	
		'search for same key
		daddr1 = 11
find_key:	
		daddr1 = fd.find(daddr1,sKeyField,1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
		if daddr1 > 0 then 'check if it's a deleted record
			daddr2 = fd.find(daddr1-10,chr(val(ACTIVE_FLAG)),1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
			if daddr2 = daddr1-10 then
				if daddr2 = (selected_tbl_RecSize*(tbl_info(tbl_num).RecPointer-1))+1 then
					daddr1 = daddr1+selected_tbl_RecSize
					goto find_key	
				end if
				goto tbl_key_violate
			else
				daddr1 = daddr1+selected_tbl_RecSize
				goto find_key
			end if
		end if
	end if
	tbl_record_edit = tbl_record_sg(EN_TBL_SET)
	exit function
tbl_ok:
	tbl_record_edit = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_record_edit = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_record_edit = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_deleted:
	tbl_record_edit = EN_TBL_STATUS_DELETED
	exit function
tbl_key_violate:
	tbl_record_edit = EN_TBL_STATUS_KEY_VIOLATION
end function

'-------------------------------------------------------------
public function tbl_record_delete() as en_tbl_status
'deletes (marks as unused) current record (tbl_record_ptr)
	dim dPtr as dword
	'examine if the record is deleted
	tbl_record_sg(EN_TBL_GET)
	if selected_tbl_Struct=EN_TBL_STRUCT_LIST then
		dPtr=fd.find(1,chr(val(ACTIVE_FLAG)),1,FORWARD,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
	else
		dPtr = (tbl_info(tbl_num).RecPointer-1)*selected_tbl_RecSize+1
	end if
	fd.setpointer(dPtr)
	if fd.getdata(1) = chr(val(DELETE_FLAG)) then goto tbl_deleted
	if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
	fd.setpointer(dPtr)
	'delete record
	fd.setdata(chr(val(DELETE_FLAG)))
	fd.flush
	selected_tbl_active_rc = selected_tbl_active_rc-1
	tbl_active_rc_sg(selected_tbl_active_rc,EN_TBL_SET)
	
	if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
tbl_ok:
	tbl_record_delete = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_record_delete = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_record_delete = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_deleted:
	tbl_record_delete = EN_TBL_STATUS_DELETED
end function

'-------------------------------------------------------------
public function tbl_timestamp_sg(byref timestamp as struct_tbl_timestamp,op as en_tbl_rdwr) as en_tbl_status
'Sets gets the timestamp for the table
	dim tsTblTsBuf as struct_tbl_timestamp
	dim ts as string(7)

	if op = EN_TBL_GET then 
		tbl_attributes_sg(selected_tbl_name,"TS",ts,EN_TBL_GET)
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
		timestamp.ts_daycount = 256*asc(mid(ts,1,1))+asc(mid(ts,2,1))
		timestamp.ts_mincount = 256*asc(mid(ts,3,1))+asc(mid(ts,4,1))
		timestamp.ts_seconds = asc(mid(ts,5,1))
		timestamp.ts_milsec = 256*asc(mid(ts,6,1))+asc(mid(ts,7,1))
	else
		ts=chr(timestamp.ts_daycount/256)
		ts=ts+chr(timestamp.ts_daycount and &hFF)
		ts=ts+chr(timestamp.ts_mincount/256)
		ts=ts+chr(timestamp.ts_mincount and &hFF)
		ts=ts+chr(timestamp.ts_seconds)
		ts=ts+chr(timestamp.ts_milsec/256)
		ts=ts+chr(timestamp.ts_milsec and &hFF)
		tbl_attributes_sg(selected_tbl_name,"TS",ts,EN_TBL_SET)
	end if
tbl_ok:
	tbl_timestamp_sg = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_timestamp_sg = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_timestamp_sg = EN_TBL_STATUS_UNKNOWN_TABLE
end function

'-------------------------------------------------------------
public function tbl_record_find(
		include_deleted as no_yes,  						'If the search includes the records that are marked as deleted.
		search_data as string, 								'Searching criteria data.
		starting_field as string, 							'Searching criteria name.
		byref num_records as word, 							'Starting record number, also returns the first found record number
		direction as en_tbl_search_direction, 				'Searching direction
		find_method as pl_fd_find_modes) as en_tbl_status	'find method (equal, greater, lesser, etc.)
'Descr: Searches through records, looks for "search_data" pattern (starting at "starting_field")
'Search starts at current (tbl_record_ptr) record, goes until the edge of table or for num_records
'Serach direction depends on "direction"
'Search stops at the first matching record found, tbl_record_ptr is set to this record's number
	
	dim i as byte
	dim daddr,daddr_temp,daddr_offset as dword
	dim total_rec_num as word
	
	tbl_record_number_get(total_rec_num,yes)
	
	if num_records = 0 or num_records > total_rec_num then goto tbl_not_found
	daddr = (num_records-1)*selected_tbl_RecSize+1
	
	if search_data <> "" then
		if tbl_field_find(starting_field) = EN_TBL_STATUS_UNKNOWN_FIELD then goto tbl_unknown_fld
		for i = 0 to fld_num
			if i = 0 then 
				daddr_offset =  1
			else
				daddr_offset = daddr_offset + tbl_get_field_size(tbl_num,i-1)
			end if
		next i
		daddr = daddr + daddr_offset		

query:
		daddr_temp = fd.find(daddr,search_data,1,direction,selected_tbl_RecSize,find_method)
		if daddr_temp = 0 then
			goto tbl_not_found
		else 
			daddr = daddr_temp-daddr_offset
		end if
	end if
	if include_deleted = NO then
		daddr_temp = fd.find(daddr,chr(val(ACTIVE_FLAG)),1,direction,selected_tbl_RecSize,PL_FD_FIND_EQUAL)
		if daddr_temp = 0 then goto tbl_not_found
		if daddr_temp <> daddr then 
			if search_data <> "" then goto query
			daddr = daddr_temp
		end if
	end if
	num_records = daddr/selected_tbl_RecSize+1
	tbl_info(tbl_num).RecPointer = num_records

tbl_ok:
	tbl_record_find = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_info(tbl_num).RecPointer = 0
	num_records = 0
	tbl_record_find = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_info(tbl_num).RecPointer = 0
	num_records = 0
	tbl_record_find = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_unknown_fld:
	tbl_info(tbl_num).RecPointer = 0
	num_records = 0
	tbl_record_find = EN_TBL_STATUS_UNKNOWN_FIELD
	exit function
tbl_not_found:
	tbl_info(tbl_num).RecPointer = 0
	num_records = 0
	tbl_record_find = EN_TBL_STATUS_NOT_FOUND
end function

'-------------------------------------------------------------
public function tbl_field_sg(byref field_name as string,byref field_value as string,op as en_tbl_rdwr) as en_tbl_status
'Descr: Extract the field from tbl_record_string or puts the field into the tbl_record_string
	dim i, fld_pos, fld_sz, msb, lsb, b as byte
	dim s, temp1, temp2 as string(128)
	dim w, msw, lsw as word
	dim d as dword
	dim l as long
	
	'find field
	if tbl_field_find(field_name)<>EN_TBL_STATUS_OK then goto tbl_unknown_fld
	fld_pos = 2
	for i = 1 to fld_num
		fld_pos=fld_pos+tbl_get_field_size(tbl_num,i-1)
	next i
	fld_sz = tbl_get_field_size(tbl_num,fld_num)
	if op = EN_TBL_GET then
		s = mid(tbl_record_string,fld_pos,fld_sz) 
		select case tbl_info(tbl_num).Fields(fld_num).FieldType
			case `B`,`Y`:
				field_value = str(asc(s))
			case `W`:
				w = asc(left(s,1))*256+asc(mid(s,2,1))
				field_value = str(w)
			case `S`:
				b = asc(left(s,1))
				field_value = mid(s,2,b)
			case `I`:
				w = asc(left(s,1))*256+asc(mid(s,2,1))
				field_value = stri(w)
			case `L`:
				msw = asc(left(s,1))*256+asc(mid(s,2,1))
				lsw = asc(mid(s,3,1))*256+asc(mid(s,4,1))
				l = msw*65536 + lsw
				field_value =lstri(l)
			case `D`:
				w = asc(left(s,1))*256+asc(mid(s,2,1))
				CovertTimeType(s,w,"","",TIME_TO_STR)
				field_value = left(s,8)
			case `T`:
				w = asc(left(s,1))*256+asc(mid(s,2,1))
				b = asc(right(s,1))
				CovertTimeType(s,"",w,b,TIME_TO_STR)
				field_value = right(s,6)
			case `Z`:
				msw = asc(left(s,1))*256+asc(mid(s,2,1))
				lsw = asc(mid(s,3,1))*256+asc(mid(s,4,1))
				d = msw*65536 + lsw
				field_value = lstr(d)
		end select	
		goto tbl_ok
	else
		select case tbl_info(tbl_num).Fields(fld_num).FieldType
			case `B`,`Y`:
				if lval(field_value) < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if lval(field_value) > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				s = chr(val(field_value))
			case `W`,`I`:
				if lval(field_value) < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if lval(field_value) > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				msb=val(field_value)/256
				lsb=val(field_value) mod 256
				s = chr(msb)+chr(lsb)
			case `S`:
				if len(field_value) < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if len(field_value) > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				s = chr(len(field_value))+field_value+strgen(fld_sz-len(field_value)-1,chr(NULL))
			case `L`:
				if lval(field_value) < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if lval(field_value) > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				msw = lval(field_value)/65536
				lsw = lval(field_value) mod 65536
				s = chr(msw/256)+chr(msw mod 256)+chr(lsw/256)+chr(lsw mod 256)
			case `D`:
				CovertTimeType(field_value+"000000",w,"","",STR_TO_TIME)
				if w < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if w > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				msb=w/256
				lsb=w mod 256
				s = chr(msb)+chr(lsb)				
			case `T`:
				CovertTimeType("20010101"+field_value,"",w,b,STR_TO_TIME)
				if w < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if w > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				msb=w/256
				lsb=w mod 256
				s = chr(msb)+chr(lsb)+chr(b)
			case `Z`:
				if lval(field_value) < tbl_info(tbl_num).Fields(fld_num).p1 then goto tbl_invalid
				if lval(field_value) > tbl_info(tbl_num).Fields(fld_num).p2 then goto tbl_invalid
				msw = lval(field_value)/65536
				lsw = lval(field_value) mod 65536
				s = chr(msw/256)+chr(msw mod 256)+chr(lsw/256)+chr(lsw mod 256)				
		end select
		temp1 = left(tbl_record_string, fld_pos-1)
		temp2 = right(tbl_record_string,len(tbl_record_string)-fld_pos-fld_sz+1)
		tbl_record_string = temp1+s+temp2
		goto tbl_ok
	end if
tbl_ok:
	tbl_field_sg = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_field_sg = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_unknown_fld:
	tbl_field_sg = EN_TBL_STATUS_UNKNOWN_FIELD
	exit function
tbl_invalid:
	tbl_field_sg = EN_TBL_STATUS_INVALID
end function

'-------------------------------------------------------------
public function tbl_record_sg(op as en_tbl_rdwr) as en_tbl_status
'Descr: Loads the record pointed at by tbl_record_ptr to tbl_record_string
	dim dPtr as dword
	'find table
	dPtr = (tbl_info(tbl_num).RecPointer-1)*selected_tbl_RecSize+1
	if fd.pointer <> dPtr then fd.setpointer(dPtr)
	if op = EN_TBL_GET then
	'get data
		tbl_record_string = fd.getdata(selected_tbl_RecSize)
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
	else
	'set data
		tbl_record_string=left(tbl_record_string,selected_tbl_RecSize-2)
		fd.setdata(tbl_record_string)
		fd.flush
		if fd.laststatus<>PL_FD_STATUS_OK then goto tbl_fail
	end if
tbl_ok:
	tbl_record_sg = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_record_sg = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_record_sg = EN_TBL_STATUS_UNKNOWN_TABLE
end function

'-------------------------------------------------------------
public function tbl_field_get_def(byref tbl_name as string(MAX_TBL_NAME_LEN), byref field_name as string, byref def_value as string) as en_tbl_status
'Descr: Loads default value for a field
	dim i, def_len as byte
	dim pos1, pos2 as word
	romfile.open(tbl_name+".txt")
	
	for i = 0 to MAX_NUM_FIELD-1
		if tbl_info(tbl_num).Fields(i).FieldName = field_name then
			pos1 = tbl_info(tbl_num).Fields(i).romaddr_def
			pos2 = romfile.find(pos1,chr(CR),1)
			romfile.pointer = pos1
			def_value = romfile.getdata(pos2-pos1)
			if def_value = "^" then def_value = ""
			goto tbl_ok
		end if
	next i
	goto tbl_unknown_fld
tbl_ok:
	tbl_field_get_def = EN_TBL_STATUS_OK 
	exit function
tbl_unknown_tbl:
	tbl_field_get_def = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_unknown_fld:
	tbl_field_get_def = EN_TBL_STATUS_UNKNOWN_FIELD
end function

'-------------------------------------------------------------
sub tbl_check_for_missing_fields(curr_pos as word, line_end_pos as word)
	if curr_pos=0 or curr_pos>line_end_pos then
		sys.halt
		'one of your descriptor lines has missing fields
	end if
end sub

'-------------------------------------------------------------
public function tbl_find(tbl_name as string(MAX_TBL_NAME_LEN)) as en_tbl_status
	dim i as byte
	for i = 0 to MAX_NUM_TABLES - 1
		if tbl_info(i).TableName = tbl_name then
			tbl_num = i
			tbl_find = EN_TBL_STATUS_OK
			exit function
		end if
	next i
	tbl_find = EN_TBL_STATUS_UNKNOWN_TABLE
end function

'-------------------------------------------------------------
function tbl_field_find(field_name as string) as en_tbl_status
	dim i as byte
	for i = 0 to MAX_NUM_FIELD-1
		if tbl_info(tbl_num).Fields(i).FieldName=field_name then 
			fld_num = i
			tbl_field_find = EN_TBL_STATUS_OK
			exit function
		end if
	next i
	tbl_field_find = EN_TBL_STATUS_UNKNOWN_FIELD
end function

'-------------------------------------------------------------
public function tbl_get_field_size(tbl_index as byte, fld_index as byte) as byte
	dim sz as byte
	select case tbl_info(tbl_index).Fields(fld_index).FieldType 
		case `B`,`Y`: sz = 1
		case `W`,`I`,`D`: sz = 2
		case `S`: sz = tbl_info(tbl_index).Fields(fld_index).p2+1
		case `L`,`Z`: sz = 4 
		case `T`: sz = 3
		case else: sz =0
	end select
	tbl_get_field_size = sz
end function

'-------------------------------------------------------------
public function tbl_get_max_fld_sz(tbl_index as byte) as byte
	dim i, temp, sz as byte
	sz = 0
	for i = 0 to MAX_NUM_FIELD-1
		temp = tbl_get_field_size(tbl_index,i) > sz 
		if temp > sz then sz = temp
	next i
end function

'-------------------------------------------------------------
public function tbl_delete() as en_tbl_status
'basically sets the file size to 0
	if fd.setfilesize(0)<>PL_FD_STATUS_OK then goto tbl_fail
	tbl_attributes_sg(selected_tbl_name,"","",EN_TBL_SET)
tbl_ok:
	tbl_delete = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_delete = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_fail:
	tbl_delete = EN_TBL_STATUS_FAILURE
end function

'--------------------------------------------------------------
public function tbl_adjust_size() as en_tbl_status
'Descr: Look through the deleted record, if all record in 1 sector are deleted, then free the sector.

	if selected_tbl_Struct <> EN_TBL_STRUCT_LIST then goto tbl_invalid

	if tbl_info(tbl_num).RecPointer*selected_tbl_RecSize> 256 then 
		if fd.cutfromtop(1) = PL_FD_STATUS_OK then 
			goto tbl_ok
		else
			goto tbl_fail
		end if
	end if
tbl_ok:
	tbl_adjust_size = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_adjust_size = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
tbl_fail:
	tbl_adjust_size = EN_TBL_STATUS_FAILURE
	exit function
tbl_invalid:
	tbl_adjust_size = EN_TBL_STATUS_INVALID
end function

'--------------------------------------------------------------
public function tbl_get_tbl_info(byref tbl as tbl_type) as en_tbl_status
'Descr: returns the table info structure
	dim tbl_temp as tbl_type
	dim i as byte

	tbl_temp = tbl_info(tbl_num)
	
	for i = 0 to MAX_NUM_FIELD-3
		tbl_temp.Fields(i)=tbl_info(tbl_num).Fields(i+2)
	next i

	tbl = tbl_temp
tbl_ok:
	tbl_get_tbl_info = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_get_tbl_info = EN_TBL_STATUS_UNKNOWN_TABLE
end function

'--------------------------------------------------------------
public function tbl_get_hash() as string(10)
	dim hash as string(4)
	dim msw, lsw as word
	dim hash_val as dword
	dim rec_num as word
	tbl_record_number_get(rec_num,NO)
	if rec_num = 0 then 
		hash_val = 0
	else
		tbl_attributes_sg(selected_tbl_name,"HASH",hash,EN_TBL_GET)
		msw = asc(left(hash,1))*256+asc(mid(hash,2,1))
		lsw = asc(mid(hash,3,1))*256+asc(mid(hash,4,1))
		hash_val=msw*65536 + lsw
	end if
	tbl_get_hash = lstri(hash_val)
end function

'--------------------------------------------------------------
public sub tbl_gen_UID()
	dim result as en_tbl_status
	dim msw, lsw as word
	dim l as long
	dim temp as string(10)
	do
		temp = random(4)
		msw = asc(left(temp,1))*256+asc(mid(temp,2,1))
		lsw = asc(mid(temp,3,1))*256+asc(mid(temp,4,1))
		l = msw*65536 + lsw
		if l < 0 then l = l*-1
		temp = lstri(l)
		result = tbl_field_sg("UID",temp,EN_TBL_SET)
	loop while result = EN_TBL_STATUS_KEY_VIOLATION
end sub

'--------------------------------------------------------------
public function tbl_copy_info(source_tbl_name as string(MAX_TBL_NAME_LEN), target_tbl_name as string(MAX_TBL_NAME_LEN) ) as en_tbl_status
	dim tbl_temp as tbl_type
	dim result as pl_fd_status_codes
	dim fnum as byte
	if tbl_find(source_tbl_name) <> EN_TBL_STATUS_OK then goto tbl_unknown_tbl
	tbl_temp = tbl_info(tbl_num)
	if tbl_find(target_tbl_name) = EN_TBL_STATUS_OK then
		fd.filenum = tbl_info(tbl_num).fnum
		fd.open(target_tbl_name)
		if fd.fileopened = NO then 
			fd.create(target_tbl_name)
			fd.open(target_tbl_name)	
		end if
	else
		goto tbl_unknown_tbl
	end if
	fnum = tbl_info(tbl_num).fnum
	tbl_info(tbl_num) = tbl_temp
	tbl_info(tbl_num).fnum = fnum
	tbl_info(tbl_num).TableName = target_tbl_name
tbl_ok:
	tbl_copy_info = EN_TBL_STATUS_OK
	exit function
tbl_unknown_tbl:
	tbl_copy_info = EN_TBL_STATUS_UNKNOWN_TABLE	
end function

'--------------------------------------------------------------
public function tbl_replace(old_tbl_name as string(MAX_TBL_NAME_LEN), new_tbl_name as string(MAX_TBL_NAME_LEN) ) as en_tbl_status
	dim i, fnum as byte
	dim tbl as tbl_type
	
	tbl_find(old_tbl_name)
	i = tbl_num
	tbl_find(new_tbl_name)
	fnum = tbl_info(i).fnum
	tbl_info(i).fnum = tbl_info(tbl_num).fnum
	tbl_info(tbl_num).fnum = fnum
	
	
	if fd.delete(old_tbl_name) <> EN_TBL_STATUS_OK then goto tbl_fail
	if fd.rename(new_tbl_name,old_tbl_name) <> EN_TBL_STATUS_OK then goto tbl_fail
	fd.filenum = tbl_info(i).fnum
	fd.open(old_tbl_name)
	if fd.fileopened = NO then fd.create(old_tbl_name)

	fd.filenum = tbl_info(tbl_num).fnum
	if fd.create(new_tbl_name) <> EN_TBL_STATUS_OK then goto tbl_fail
	fd.open(new_tbl_name)
tbl_ok:
	tbl_replace = EN_TBL_STATUS_OK
	exit function
tbl_fail:
	tbl_replace = EN_TBL_STATUS_FAILURE
	exit function
tbl_unknown_tbl:
	tbl_replace = EN_TBL_STATUS_UNKNOWN_TABLE
	exit function
end function