include "global.tbh"

const FIELD_SEPARATOR=9
const END_OF_LINE=13

const COMMAND_START = &h02
const COMMAND_END = &h0d
const COMMAND_PARAMETERS_SEPARATOR = &h17

const ELEMENT_START = &h1c
const ELEMENT_END = &h1d
const ELEMENT_NAME_VALUE_SEPARATOR = &h1e
const TABLE_NULL = &h1a
const AGG_RECONN_TIME = 5
const LS_MAIN_SCRIPT = "ls_script.txt"
const LS_EVENT_SCRIPT = "ls_event.txt"
const LS_FUNC_SCRIPT = "ls_function.txt"

type agg_context
	key_name as string(RECORD_NAME_LEN)
	context_code as byte
	romaddr_def as word
end type

type command
	code as string(1)
	id as string(8)
	messageCode as string(1)
	operationCode as string(1)
	context as string(CONTEXT_NAME_LEN)
	record as string(RECORD_NAME_LEN)
end type

dim flag_addr as dword
dim agc as agg_context(MAX_ENTITY_NUM)
dim age as agg_context(EVENT_TYPE_NUM)
dim agf as agg_context(FUNCTION_NUM)
dim send_event as no_yes
dim is_last_event as no_yes

dim agg_reconn_timer as byte
dim context_type(MAX_CONTEXT_NUM) as string(CONTEXT_NAME_LEN)
dim record_head as dword

public dim aggregate_login_state as LS_state
public dim agg_conn_flag as no_yes
public dim event_flag as no_yes

declare function fd_file_init(file_name as string) as pl_fd_status_codes
declare sub FormatTime(byref ts_str as string(19), byref wDaycount as word,byref wMincount as word,byref bSec as byte, conver_dir as time_convert_dir)

declare on_sys_timer_event_dest as on_sys_timer_event_destinations


'=============================================================
sub Mem_Struct_Fill(script_file as string, byref mem_struct as agg_context(MAX_ENTITY_NUM), max_count as byte, fill_context_array as no_yes)
'Search through the romfile and store the address of records in the array for later fast access 

	dim s as string
	dim i, line_end as word
	dim num_agc, j, k as byte
	k = 0
	j = 0
	
	num_agc=0 'will count settings (starting from 0)
	romfile.open(script_file)				'this file is a setting descriptor table
	i=romfile.find(romfile.pointer,"::",1)
	while i<>0
		'we are now at the ">>" pointing at the beginning of one setting descriptor line
		romfile.pointer=i+2
		
		'find the end of this setting descriptor line
		line_end=romfile.find(romfile.pointer,chr(END_OF_LINE),1)
		
		'extract entity name
		do
			i=romfile.find(romfile.pointer,chr(FIELD_SEPARATOR),1) 
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		if len(s) > RECORD_NAME_LEN then sys.halt 'the key name is too long
		mem_struct(num_agc).key_name = s
		
		'extract setting type
		do
			i=romfile.find(romfile.pointer,chr(FIELD_SEPARATOR),1) 	
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s=""		
		do
		if fill_context_array = YES then
			for k = 0 to j
				if context_type(k) = s then
					mem_struct(num_agc).context_code=k
					exit do
				end if
			next k
			context_type(j) = s
			mem_struct(num_agc).context_code=j
			j = j + 1
		else
			for k = 0 to MAX_CONTEXT_NUM-1
				if context_type(k) = s then
					mem_struct(num_agc).context_code=k
					exit do
				end if
			next k
		end if
		loop while j < MAX_CONTEXT_NUM-1
	
		'extract the number of members
		do
			i=romfile.find(romfile.pointer,chr(FIELD_SEPARATOR),1) 
			if i > line_end then i = line_end			
			mem_struct(num_agc).romaddr_def=romfile.pointer
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		' move to next one
		i=romfile.find(line_end,"::",1)
		num_agc=num_agc+1
	
		'exceeded the max lines of scripts?
		if num_agc>=max_count and i<>0 then
			sys.halt
			num_agc=0 'you need to increase MAX_ENTITY_NUM!
		end if
	wend
end sub

'=============================================================
public sub AggreGateInit
'AggreGate agent initialization

	'Fill up the address table for main script, event script and function script 
	Mem_Struct_Fill(LS_MAIN_SCRIPT,agc, MAX_ENTITY_NUM,yes)
	Mem_Struct_Fill(LS_EVENT_SCRIPT,age, EVENT_TYPE_NUM,no)
	Mem_Struct_Fill(LS_FUNC_SCRIPT, agf, FUNCTION_NUM, no)


	'Check the fdisk status, if it is not properly setup, formate the disk and create the file again
'---------- Event handle by device ---------------
	'event_log_init
	agg_conn_flag = NO
	record_head = 1

end sub

'=============================================================
function GetNumAgc(key_name as string(RECORD_NAME_LEN), context_code as byte, byref mem_struct as agg_context(MAX_ENTITY_NUM), max_count as byte)as byte
'Find the index of record in the address table

	dim i as byte 
	for i = 0 to max_count - 1
		if mem_struct(i).key_name = key_name and mem_struct(i).context_code = context_code then 
			GetNumAgc = i
			exit function
		end if
	next i
	GetNumAgc = 255
end function


'=============================================================
sub SetTime(byref date_time as string(19))
'Set the RTC time

	dim bSysSec as byte
	dim wSysDaycount,wSysMincount as word
	
	FormatTime(date_time,wSysDaycount,wSysMincount,bSysSec,STR_TO_TIME)
	rtc.setdata(wSysDaycount,wSysMincount,bSysSec)
end sub

'=============================================================

sub SetModTime(byref date_time as string(19))
'Set Modification Time 

	dim bSysSec as byte
	dim wSysDaycount,wSysMincount as word
	
	FormatTime(date_time,wSysDaycount,wSysMincount,bSysSec,STR_TO_TIME)
	stg_timestamp.ts_daycount = wSysDaycount
	stg_timestamp.ts_mincount = wSysMincount
	stg_timestamp.ts_seconds = bSysSec
end sub

'=============================================================
public function GetTime as string(19)
'Get the RTC time

	dim wSysDaycount, wSysMincount as word
	dim bSysSec as byte
 
	rtc.getdata(wSysDaycount, wSysMincount,bSysSec)

	FormatTime(GetTime, wSysDaycount, wSysMincount,bSysSec,TIME_TO_STR)
end function

'=============================================================
function GetModTime as string(19)
'Get the Modification Time

	dim wModDaycount, wModMincount as word
	dim bModSec as byte
 
	wModDaycount = stg_timestamp.ts_daycount
	wModMincount = stg_timestamp.ts_mincount
	bModSec = stg_timestamp.ts_seconds
	
	FormatTime(GetModTime,wModDaycount, wModMincount,bModSec,TIME_TO_STR)
end function

'=============================================================
sub Replace_Chr(byref s as string, a as string, b as string)
	dim pos as byte
	dim temp as string
	pos = instr(1,s,a,1)
	while pos > 0 
		temp = right(s,len(s)-pos-len(a)+1)
		s = left(s,pos-1)+b+temp
		pos = instr(pos+1,s,a,1)
	wend
end sub

'=============================================================
sub Invisible_Separators(byref s as string)
	replace_chr(s,"<",chr(ELEMENT_START))
	replace_chr(s,">",chr(ELEMENT_END))
	replace_chr(s,"=",chr(ELEMENT_NAME_VALUE_SEPARATOR))
	replace_chr(s,"^",chr(TABLE_NULL))
end sub

'=============================================================
sub Proc_Time(byref s as string)
	dim pos1,pos2,pos3 as byte
	pos1 = 0
	do 
		pos1 = instr(pos1+1,s,"||tm||",1)
		if pos1 > 0 then 
			Replace_Chr(s,"||tm||",GetTime+".000")
		end if
	loop while pos1 > 0 
	pos1 = 0
	do 
		pos1 = instr(pos1+1,s,"||mt||",1)
		if pos1 > 0 then 
			pos2 = instr(1,s,"<R=<",1)+3
			pos3 = instr(pos2+1,s,">",1)
			setting_sg(mid(s,pos2+1,pos3-pos2-1),0,"",EN_STG_GET)
			Replace_Chr(s,"||mt||",GetModTime+".000")
		end if
	loop while pos1 > 0 
end sub

'=============================================================
sub Proc_Variable(byref s as string, setting_name as string(RECORD_NAME_LEN))
	dim pos1,pos2 as byte
	dim sTemp as string
	pos1 = 0
	do 
		pos1 = instr(pos1+1,s,"||va||",1)
		if pos1 > 0 then
			
			'cases for special setting modifications 
			select case setting_name
			case "TC":
				setting_sg(setting_name,0,sTemp,EN_STG_GET)
				sTemp = "2000-01-01 "+sTemp+":00.000"
			case "version":
				sTemp = FIRMWARE_VERSION
				sTemp = mid(sTemp,3,len(sTemp)-3)
			case "date":
				dim wDaycount,wMincount as word
				dim bSec as byte
				rtc.getdata(wDaycount,wMincount,bSec)
				FormatTime(sTemp,wDaycount,wMincount,bSec,TIME_TO_STR)
				sTemp = sTemp+".000"
			case else
				setting_sg(setting_name,0,sTemp,EN_STG_GET)
			end select
			
			Replace_Chr(s,"||va||",sTemp)
		end if
	loop while pos1 > 0 
end sub

'=============================================================
function CallFunction(key_name as string(RECORD_NAME_LEN) ,context_code as byte, func_input as string) as string
	dim s as string
	dim w as word
	lcd_print_status(LCD_BUSY,yes)
	kp.enabled = NO
	ser.num = READER_PORT_NUM
	ser.enabled = NO
	ser.num = 0
	ser.enabled = NO 
	if len(func_input) > 0 then
		s = key_name+mid(func_input,2,len(func_input)-2)
	else 
		s = key_name
	end if
	Select case context_code
	case 1:
		Select case key_name
					
'---------------------------------------------------------------------	
		case "K":
			
			s = proc_device_op(s)
			ui_clock_force_print = YES
			w = sys.timercount
			while sys.timercount < w+4
				if sys.timercount < w then w = sys.timercount 
			wend
			if on_sys_timer_event_dest = ON_SYS_TIMER_EVENT_DEST_CLOCK then lcd_clear(24,15,80,37)

			select case left(s,1)
			case "A":
			CallFunction = "<R=<"+SNTP_TS_TIME_SYNC_OK+">>"
			case "D":
			CallFunction = "<R=<"+SNTP_TS_CONNECT_FAIL+">>"
			case "C":
			CallFunction = "<R=<"+SNTP_TS_ERROR_FORMAT+">>"
			case "R":
			CallFunction = "<R=<"+SNTP_TS_REPLY_TIMEOUT+">>"		
			end select
		case else:
			s = proc_device_op(s)
			ui_clock_force_print = YES
			w = sys.timercount
			while sys.timercount < w+4
				if sys.timercount < w then w = sys.timercount 
			wend
			if on_sys_timer_event_dest = ON_SYS_TIMER_EVENT_DEST_CLOCK then lcd_clear(24,15,80,37)

			select case left(s,1)
			case "A":
				if len(s) = "1" then 
					CallFunction = "<R=<SUCCESS>>"
				else
					CallFunction = "<R=<SUCCESS>> <R=<"+right(s,len(s)-1)+">"
				end if
			case "D":
					CallFunction = "<R=<REJECTED>>"
			case "F"
					CallFunction = "<R=<FAILED>>"
			case "R"		 
					CallFunction = "<R=<DENIED>>"
			case "C"
					CallFunction = "<R=<ERROR>>"
			end select
		end select
	end select
	lcd_print_status(LCD_BUSY,no)
	kp.enabled = yes
	ser.num = READER_PORT_NUM
	ser.enabled = yes
	ser.num = 0
	ser.enabled = yes 
end function

'=============================================================
public sub ProcessCommand
	dim pos1, pos2, pos_start, pos_end, i as byte
	dim cmd as command
	dim s as string
	dim num_agc as byte
	dim romaddr_start, romaddr_end, romaddr_mid as word
	dim func_input as string
	dim context_code as byte
	dim long_cmd as no_yes
	
	romfile.open(LS_MAIN_SCRIPT)
	sock.num = SOCK_LS
	s = sock.peekdata(255)
	if len(s) > 254 then 
		long_cmd = yes
		pos_end = instr(1,s,chr(COMMAND_PARAMETERS_SEPARATOR),6)
	else
		long_cmd = NO
		pos_end = instr(1,s,chr(COMMAND_END),1)
	end if
	pos_start = instr(1,s,chr(COMMAND_START),1)
	if pos_start > 0 and pos_end > 0 and pos_end > pos_start then 
		
		s = sock.getdata(pos_end)
		s = right(s,pos_end-pos_start+1)
		cmd.code = mid(s,2,1)
		pos1 = instr(1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
		pos2 = instr(pos1+1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
		cmd.id = mid(s,pos1+1,pos2-pos1-1)
		cmd.messageCode = mid(s,pos2+1,1)
		pos1 = instr(pos2+1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
		cmd.operationCode = mid(s,pos1+1,1)
		pos1 = instr(pos1+1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
		pos2 = instr(pos1+1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
		cmd.context = mid(s,pos1+1,pos2-pos1-1)
		if long_cmd = NO then
			pos1 = pos2
			pos2 = instr(pos1+1,s,chr(COMMAND_END),1)
			if pos1 > 0 and pos2 > 0 then
				s = mid(s,pos1+1,pos2-pos1-1)
				pos1 = instr(1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
				if pos1> 0 then
					cmd.record = left(s,pos1-1)
				else
					cmd.record = s
				end if 
			end if
		else
			pos1 = pos2
			pos2 = instr(pos1+1,s,chr(COMMAND_PARAMETERS_SEPARATOR),1)
			cmd.record = mid(s,pos1+1,pos2-pos1-1)
		end if
	else
	end if
	if cmd.code = "M" then
	
		select case cmd.messageCode
			case "S":
				s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"A"+chr(COMMAND_END)
				sock.num = SOCK_LS
				sock.setdata(s)
				sock.send()		
				s = ""
			case "O":
			for i = 0 to MAX_CONTEXT_NUM-1
				if context_type(i) = cmd.context then
					context_code = i
					exit for
				end if
			next i  
			if cmd.context = "" then context_code = 0
			'key_name= cmd.record 'for variables, key_name correspond with the setting name in setting.txt				
			select case cmd.operationCode
				case "G":
					num_agc = GetNumAgc(cmd.record, context_code,agc,MAX_ENTITY_NUM)
					if num_agc = 255 then 
						s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"E"+chr(COMMAND_PARAMETERS_SEPARATOR)+"Unable to find the variable"+chr(COMMAND_END)
						invisible_separators(s)
						sock.num = SOCK_LS
						sock.setdata(s)
						sock.send()
						exit sub
					end if
					romaddr_start = agc(num_agc).romaddr_def
					romaddr_end = romfile.find(romaddr_start,chr(COMMAND_END),1)
					romfile.pointer = romaddr_start
					s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"A"+chr(COMMAND_PARAMETERS_SEPARATOR)+romfile.getdata(romaddr_end-romaddr_start)
					proc_variable(s, agc(num_agc).key_name)
					proc_time(s)
					invisible_separators(s)
					sock.num = SOCK_LS
					sock.setdata(s)
					sock.send
					s = ""
					romaddr_mid = romfile.find(romaddr_start,"~~",1)					
					while  romaddr_mid < agc(num_agc+1).romaddr_def and romaddr_mid > 0
						romaddr_start = romaddr_mid+2
						romaddr_end = romfile.find(romaddr_start,chr(COMMAND_END),1)
						romfile.pointer = romaddr_start
						s = romfile.getdata(romaddr_end-romaddr_start)
						proc_variable(s, agc(num_agc).key_name)
						proc_time(s)
						invisible_separators(s)
						sock.num = SOCK_LS
						sock.setdata(s)
						sock.send						
						s = ""
						romaddr_mid = romfile.find(romaddr_start,"~~",1)
						if romaddr_mid = 0 then exit while
					wend 
					sock.num = SOCK_LS
					sock.setdata(chr(COMMAND_END))	
					sock.send
					
				case "S":
					pos1 = instr(1,s,chr(ELEMENT_START)+"R"+chr(ELEMENT_NAME_VALUE_SEPARATOR)+chr(ELEMENT_START),1)+4
					pos2 = instr(pos1,s,chr(ELEMENT_END),1)
					if left(s,7) = "modtime" then pos2 = instr(pos2+1,s,chr(ELEMENT_END),1)
					s = mid(s,pos1,pos2-pos1)
					select case cmd.record
						case "date":
							SetTime(s)
							ui_clock_force_print = YES
							s = ""
						case "6":
							if long_cmd = YES then
								do  
									sock.num = SOCK_LS
									s = sock.peekdata(255)
									pos2 = instr(1,s,chr(ELEMENT_START)+"R"+chr(ELEMENT_NAME_VALUE_SEPARATOR)+chr(ELEMENT_START),1)+4
									pos1 = instr(pos2,s,chr(ELEMENT_END),2)
									
									if pos2 > 0 and pos1 > 0 then
										s = sock.getdata(pos1)
										pos1 = instr(pos2,s,chr(ELEMENT_START),1)
										SetModTime(mid(s,pos1+1,19))
										pos1 = instr(pos2,s,chr(ELEMENT_END),1)
										setting_set_ts(mid(s,pos2,pos1-pos2),0)
									else
										s = sock.getdata(255)
									end if
									pos2 = instr(1,s,chr(COMMAND_END),1)
								loop while pos2 = 0
							else
								if pos1 > 4 then
									pos2 = instr(1,s,chr(ELEMENT_START),1)
									pos1 = instr(1,s,chr(ELEMENT_END),1)
									SetModTime(mid(s,pos2+1,19))
									setting_set_ts(mid(s,1,pos1-1),0)
								end if
							end if
							s = ""
						case "modtime":
						event_flag = YES
						s= ""
						case else
							'cases for special setting modifications 
							select case cmd.record
							case "TC":
								s = mid(s,12,5)
							case "IP":
								if error_ip_chker(s) = false then goto invalid_val
							case "TS":
								if error_ip_chker(s) = false then goto invalid_val
							case "TC":
								if error_time_chker(s) = false then goto invalid_val
							end select
			
							if setting_sg(cmd.record,0,s,EN_STG_SET) <> EN_STG_STATUS_OK then
invalid_val:					s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"E"+chr(COMMAND_PARAMETERS_SEPARATOR)+"Unable to save the variable"+chr(COMMAND_END)
								invisible_separators(s)
								sock.num = SOCK_LS
								sock.setdata(s)
								sock.send()
								exit sub
							else 
								s = ""
							end if
					end select				
					s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"A"+s+chr(COMMAND_END)
					sock.num = SOCK_LS
					sock.setdata(s)
					sock.send()				
					s = ""
				case "C":
					pos1 = instr(1,s,chr(ELEMENT_START)+"R"+chr(ELEMENT_NAME_VALUE_SEPARATOR)+chr(ELEMENT_START),1)+3
					pos2 = pos1
					while instr(pos2+1,s,chr(ELEMENT_END),1) > 0
						pos2 = instr(pos2+1,s,chr(ELEMENT_END),1)
					wend
					if pos1 > 3 then 
						func_input = mid(s,pos1,pos2-pos1)
					else
						func_input = ""
					end if
					romfile.open(LS_FUNC_SCRIPT)
					num_agc = GetNumAgc(cmd.record, context_code,agf,FUNCTION_NUM)
					if num_agc = 255 then 
						s = "<I=Unable to find the command>"
					else
						romaddr_start = agf(num_agc).romaddr_def
						romaddr_end = romfile.find(romaddr_start,chr(COMMAND_END),1)
						romfile.pointer = romaddr_start
						s = romfile.getdata(romaddr_end-romaddr_start)
						
					'------ function need to be processed here --------
						s = s + CallFunction(cmd.record,context_code,func_input)						
					end if
					s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"A"+chr(COMMAND_PARAMETERS_SEPARATOR)+s+chr(COMMAND_END)
					Invisible_Separators(s)
					sock.num = SOCK_LS
					sock.setdata(s)
					sock.send()

				case "L":
					s = chr(COMMAND_START)+"R"+chr(COMMAND_PARAMETERS_SEPARATOR)+cmd.id+chr(COMMAND_PARAMETERS_SEPARATOR)+"A"+chr(COMMAND_END)
					sock.num = SOCK_LS
					sock.setdata(s)
					sock.send()
			end select
		end select
	end if
end sub

'=============================================================
sub ProcessEvents
	dim context_code as byte
	dim s,info as string
	dim time_str as string(19)
	dim num_agc, k as byte
	dim romaddr_start, romaddr_end as word
	dim active_flag as string(1)
	dim result as pl_fd_status_codes
	
	if event_flag <> YES or agg_conn_flag <> YES or send_event <> YES or is_last_event <> NO then exit sub
	romfile.open(LS_EVENT_SCRIPT)
	fd.filenum = 0 
	if fd.fileopened = NO then fd.open(EVENT_FILE)
	result = fd.setpointer(record_head)	
	
	do 
		flag_addr = fd.pointer
		if fd.pointer < fd.filesize then
			s = fd.getdata(LS_EVENT_SZ)
			active_flag = left(s,1)
		else
			is_last_event = YES
			lcd_print_status(LCD_BUSY,no)
			exit sub
		end if
		if active_flag <> chr(&hff) then 
			record_head = fd.pointer
			exit do
		end if
	loop while true

	time_str = mid(s,2,19)
	info = mid(s,22,len(s)-23)
'************ TEV **************
#if MODEL = TEV	
	dim b as byte
	b = instr(1,info,chr(&h20),1)
	if b > 0 then info = left(info,b-1)
#endif	
'*******************************
	if len(info)>0 then
		Replace_Chr(info,chr(TAB),"><")
		info = "<"+info+">"
	end if


	k = asc(active_flag)
	romaddr_start = age(k).romaddr_def
	romaddr_end = romfile.find(romaddr_start,chr(COMMAND_END),1)
	romfile.pointer = romaddr_start
	s = romfile.getdata(romaddr_end-romaddr_start)+"<R="+info+"<"+time_str+".000>>"
	s = chr(COMMAND_START)+s+chr(COMMAND_END)	
	invisible_separators(s)
	replace_chr(s,"/",chr(COMMAND_PARAMETERS_SEPARATOR))
	sock.num = SOCK_LS
	if len(s) > 2 then
		lcd_print_status(LCD_BUSY,yes)
		sock.setdata(s)
		sock.send
		sock.notifysent(65535)
		send_event = NO
	end if
end sub

'=============================================================
public function RemoveEvent as pl_fd_status_codes
	dim daddr as dword
	dim result as pl_fd_status_codes
	fd.filenum = 0
	if flag_addr > fd.filesize then 
		RemoveEvent = PL_FD_STATUS_FAIL
	else
		result = fd.setpointer(flag_addr)
		result = fd.setdata(chr(&hff))	
		fd.flush
		daddr = flag_addr+LS_EVENT_SZ
		if  daddr >= 256 then
			RemoveEvent = fd.cutfromtop(1)		
			record_head = 1
		end if
	end if
end function
'=============================================================
public sub AggreGateConnected
	send_event = YES
	event_flag = NO
	is_last_event = NO
	agg_conn_flag = YES
end sub

'=============================================================
public sub AggreGateDisconnect
	sock.num = SOCK_LS
	sock.discard
	agg_conn_flag = NO
	lcd_print_status(LCD_BUSY,no)
end sub

'=============================================================
public function AddEvent(context_name as string(CONTEXT_NAME_LEN), event_name as string(RECORD_NAME_LEN), event_info as string)	as pl_fd_status_codes
	dim s as string
	dim wDaycount,wMincount as word
	dim i, b as byte
	dim active_flag as string(1)
	dim result as pl_fd_status_codes
	active_flag = chr(0) 'Active
	for i = 0 to EVENT_TYPE_NUM-1
		b = age(i).context_code
		s = context_type(b)
		if s = context_name and age(i).key_name = event_name then
			active_flag = chr(i)
		end if
	next i
	s = GetTime
	if len(event_info) > 0 then
		s = active_flag +s+chr(TAB)+event_info+chr(CR)+chr(LF)
	else 
		s = active_flag +s+chr(CR)+chr(LF)
	end if
	s = s + strgen(LS_EVENT_SZ-len(s),chr(CR))
	fd.filenum = 0 
	if fd.fileopened = NO then fd.open(EVENT_FILE)
	result = fd.setpointer(fd.filesize+1)
	if result = PL_FD_STATUS_OK then
		result = fd.setdata(s)
		fd.flush
		is_last_event = NO
	end if
	AddEvent = result
end function

'=============================================================
sub AggreGateProcessTimer
	dim AR_flag as string(1)
	dim server_ip as string(16)
	setting_sg("AR",0,AR_flag,EN_STG_GET)
	setting_sg("DI",0,server_ip,EN_STG_GET)
	sock.num = SOCK_LS
	sock.targetip = server_ip
	'if sock.statesimple <> PL_SSTS_EST and AR_flag = "1" and aggregate_login_state = LS_LOGIN_STATE then sock.connect
	if agg_conn_flag = NO and AR_flag = "0" then exit sub
	if aggregate_login_state = LS_NO_PRIORITY and sock.statesimple = PL_SSTS_EST then AggreGateDisconnect
	if sock.statesimple = PL_SSTS_CLOSED and ls_login_status = YES and aggregate_login_state <> LS_NO_PRIORITY then
		if agg_reconn_timer = 0 then
			sock.connect
			agg_reconn_timer = AGG_RECONN_TIME
		else
			agg_reconn_timer = agg_reconn_timer - 1
		end if 
	end if
end sub